---
apiVersion: v1
kind: Secret
metadata:
  name: myvelero-secret
  namespace: velero
type: Opaque
data:
  username: YWRtaW4=
  password: YWRtaW5wd2Q=

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myvelero-sa
  namespace: velero

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-velero-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: myvelero-sa
    namespace: velero

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-velero
  namespace: velero
  labels:
    app: myvelero
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myvelero
  template:
    metadata:
      labels:
        app: myvelero
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '3001'
    spec:
      serviceAccountName: myvelero-sa
      # volumes:
      # - name: myvelero-tls
      #   secret:
      #     secretName: myvelero-tls
      containers:
        - name: my-velero
          image: medinvention/my-velero-dashboard:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              protocol: TCP
            - containerPort: 3001
              protocol: TCP
            - containerPort: 3002
              protocol: TCP
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 500m
              memory: 512Mi
          # volumeMounts:
          # - name: myvelero-tls
          #   readOnly: true
          #   mountPath: "/usr/src/tls"
          env:
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: myvelero-secret
                  key: username
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: myvelero-secret
                  key: password
            - name: USE_FSBACKUP
              value: '1'
            # - name: SECURE_HOST
            #   value: "1"
            # - name: SECURE_HOST_CERT_FILE_PATH
            #   value: "/usr/src/tls/tls.crt"
            # - name: SECURE_HOST_KEY_FILE_PATH
            #   value: "/usr/src/tls/tls.key"
            - name: DEBUG
              value: '1'
            - name: METRICS
              value: '1'
            - name: LDAP_HOST
              value: ldaps://my-velero-ldap-svc.velero.svc.cluster.local:636
            - name: LDAP_SKIP_SSL
              value: '1'
            - name: LDAP_START_TLS
              value: '0'
            - name: LDAP_BIND_DN
              value: 'CN=admin,OU=users,DC=mtr,DC=com'
            - name: LDAP_BIND_PASSWORD
              value: itachi
            - name: LDAP_SEARCH_BASE
              value: 'OU=users,DC=mtr,DC=com'
            - name: LDAP_SEARCH_FILTER
              value: sAMAccountName
            - name: NAMESPACE_FILTERING
              value: '[{"group": "IT", "namespaces": ["ovpn","ovpn-dev","ovpn-prd"]}]'

---
apiVersion: v1
kind: Service
metadata:
  name: my-velero-svc
  namespace: velero
spec:
  ports:
    - name: http
      port: 80
      targetPort: 3000
    - name: api
      port: 81
      targetPort: 3002
  selector:
    app: myvelero

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  name: my-velero-ing
  namespace: velero
  labels:
    app: myvelero
spec:
  rules:
    - host: myvelero.medinvention.dev
      http:
        paths:
          - backend:
              serviceName: my-velero-svc
              servicePort: http
            path: /
          - backend:
              serviceName: my-velero-svc
              servicePort: api
            path: /api/
  tls:
    - hosts:
        - myvelero.medinvention.dev
      secretName: myvelero-tls
